4. 특정 색상 영역 추출하기 (불리언 마스킹)

red_mask = image[:, :, 0] > 160

masked_image = image.copy()

masked_image[~np.stack([red_mask]*3, axis=-1)] = 0

원리: **불리언 마스킹(Boolean Masking)**을 이용하여 조건에 맞는 픽셀만 남기고 나머지는 다른 값으로 바꿉니다.

red_mask = image[:, :, 0] > 160:

image[:, :, 0]은 모든 행, 모든 열의 0번 채널(Red) 값만 선택하는 것입니다.

이렇게 선택된 2차원 배열(붉은색 값들)에서 값이 160을 초과하는 픽셀은 True, 아닌 픽셀은 False가 되는 불리언 마스크(red_mask)를 생성합니다.

masked_image = image.copy(): 원본 이미지를 훼손하지 않기 위해 복사본을 만듭니다.

~np.stack([red_mask]*3, axis=-1): 이 부분이 조금 복잡합니다.

[red_mask]*3: (300, 451) 모양의 2D 마스크를 3개 가진 리스트를 만듭니다.

np.stack(..., axis=-1): 이 3개의 2D 마스크를 마지막 차원(-1)을 따라 쌓아서, 원본 이미지와 동일한 (300, 451, 3) 모양의 3D 마스크를 만듭니다.

~: NOT 연산자입니다. True는 False로, False는 True로 뒤집습니다. 즉, **"붉은색이 160을 넘지 않는 영역"**을 True로 만듭니다.

masked_image[...] = 0: True인 영역, 즉 "붉지 않은 영역"의 모든 픽셀 값을 0(검은색)으로 변경합니다.

결과: 이미지에서 붉은 기가 강한 부분만 남고 나머지는 검게 변한 이미지가 생성됩니다.
